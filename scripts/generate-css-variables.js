#!/usr/bin/env node

const fsExtra = require('fs-extra');
const path = require('path');

// Configuration
const variablesDir = path.join(__dirname, '../projects/canopy/src/styles/variables');
const outputDir = path.join(__dirname, '../projects/canopy/storybook/css-variables');

// Ensure output directory exists
fsExtra.ensureDirSync(outputDir);

// Convert filename to camelCase for variable naming
const toCamelCase = (str) => {
  return str.replace(/[-_]([a-z])/g, (g) => g[1].toUpperCase());
};

// Get all files recursively from a directory
const getFilesRecursively = (dir) => {
  const results = [];
  const files = fsExtra.readdirSync(dir, { withFileTypes: true });

  for (const file of files) {
    const filePath = path.join(dir, file.name);

    if (file.isDirectory()) {
      results.push(...getFilesRecursively(filePath));
    } else if (file.name.endsWith('.scss')) {
      results.push(filePath);
    }
  }

  return results;
};

// Convert array to string with single quotes
const arrayToStringWithSingleQuotes = (arr) => {
  const formattedItems = arr.map(item => `  '${item}'`).join(',\n');
  return `[\n${formattedItems}\n]`;
};

// Find all SCSS files in the variables directory
const processVariablesFiles = () => {
  // Get all scss files recursively
  const files = getFilesRecursively(variablesDir);

  files.forEach(filePath => {
    const content = fsExtra.readFileSync(filePath, 'utf-8');

    // Extract variable names (--variable-name format)
    const variableRegex = /--[a-zA-Z0-9-]+/g;
    const matches = content.match(variableRegex) || [];

    // Remove duplicates
    const uniqueVariables = [...new Set(matches)];

    if (uniqueVariables.length > 0) {
      // Create relative path from variablesDir
      const relativePath = path.relative(variablesDir, filePath);

      // Create output filename - remove underscore and change extension to .ts
      const fileName = path.basename(relativePath).replace(/^_/, '').replace('.scss', '.ts');

      // Get base name without extension for the variable name
      const baseFileName = path.basename(relativePath).replace(/^_/, '').replace('.scss', '');
      const variableName = toCamelCase(baseFileName) + 'Variables';

      // For nested files, create appropriate directory structure
      const relativeDir = path.dirname(relativePath);
      const outputPath = path.join(outputDir, relativeDir);

      // Ensure the output directory exists (handles nested directories)
      fsExtra.ensureDirSync(outputPath);

      const outputFilePath = path.join(outputPath, fileName);

      // Generate the TypeScript content with default export for compatibility
      const tsContent = `// AUTO-GENERATED FILE - DO NOT MODIFY
// Generated by generate-css-variables.js

const ${variableName} = ${arrayToStringWithSingleQuotes(uniqueVariables)};

export default ${variableName};
`;

      fsExtra.writeFileSync(outputFilePath, tsContent);
      console.log(`Generated ${outputFilePath} with ${uniqueVariables.length} variables as ${variableName}`);
    }
  });
};

// Clean up existing output directory
const cleanOutputDir = () => {
  if (fsExtra.existsSync(outputDir)) {
    fsExtra.emptyDirSync(outputDir);
    console.log(`Cleaned output directory: ${outputDir}`);
  }
};

// Main execution
try {
  cleanOutputDir();
  processVariablesFiles();
  console.log('CSS variables extraction completed successfully!');
} catch (error) {
  console.error('Error generating CSS variables:', error);
  process.exit(1);
}
