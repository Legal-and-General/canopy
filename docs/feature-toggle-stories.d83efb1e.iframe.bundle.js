"use strict";(self.webpackChunk_legal_and_general_canopy=self.webpackChunk_legal_and_general_canopy||[]).push([[6796],{"./projects/canopy/src/lib/feature-toggle/docs/feature-toggle.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>feature_toggle_stories,featureToggle:()=>featureToggle});var dist=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),of=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/of.js"),card_module=__webpack_require__("./projects/canopy/src/lib/card/card.module.ts"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),tap=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/tap.js"),filter=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/filter.js");const togglesInjectable=new core.InjectionToken("Toggles configuration"),togglesOptionsInjectable=new core.InjectionToken("Toggles options");var _class,Observable=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/Observable.js");let LgFeatureToggleService=((_class=class LgFeatureToggleService{constructor(toggles$){this.toggles$=toggles$}}).ctorParameters=()=>[{type:Observable.y,decorators:[{type:core.Inject,args:[togglesInjectable]}]}],_class);var feature_toggle_directive_class;LgFeatureToggleService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],LgFeatureToggleService);let LgFeatureToggleDirective=(feature_toggle_directive_class=class LgFeatureToggleDirective{constructor(lgFeatureToggleService,templateRef,viewContainer,options){this.lgFeatureToggleService=lgFeatureToggleService,this.templateRef=templateRef,this.viewContainer=viewContainer,this.options=options}ngOnInit(){this.subscription=this.lgFeatureToggleService.toggles$.pipe((0,tap.b)((()=>this.viewContainer.clear())),(0,filter.h)((toggles=>void 0===toggles[this.lgFeatureToggle]&&!this.isDefaultHideSet()||toggles[this.lgFeatureToggle]))).subscribe((()=>{this.viewContainer.createEmbeddedView(this.templateRef)}))}setOptions(options){this.options=options}ngOnDestroy(){this.subscription?.unsubscribe()}isDefaultHideSet(){return this.options&&this.options.defaultHide}},feature_toggle_directive_class.ctorParameters=()=>[{type:LgFeatureToggleService},{type:core.TemplateRef},{type:core.ViewContainerRef},{type:void 0,decorators:[{type:core.Optional},{type:core.Inject,args:[togglesOptionsInjectable]}]}],feature_toggle_directive_class.propDecorators={lgFeatureToggle:[{type:core.Input}]},feature_toggle_directive_class);var LgFeatureToggleModule_1;LgFeatureToggleDirective=(0,tslib_es6.gn)([(0,core.Directive)({selector:"[lgFeatureToggle]"})],LgFeatureToggleDirective);let LgFeatureToggleModule=LgFeatureToggleModule_1=class LgFeatureToggleModule{static forRoot(toggles,optionsInjectable){return{ngModule:LgFeatureToggleModule_1,providers:[LgFeatureToggleService,{provide:togglesInjectable,useFactory:toggles.useFactory,deps:toggles.deps},{provide:togglesOptionsInjectable,useValue:optionsInjectable}]}}};LgFeatureToggleModule=LgFeatureToggleModule_1=(0,tslib_es6.gn)([(0,core.NgModule)({declarations:[LgFeatureToggleDirective],providers:[LgFeatureToggleService],exports:[LgFeatureToggleDirective]})],LgFeatureToggleModule);const feature_toggle_stories={title:"Helpers/Directives/Feature toggle/Examples",component:LgFeatureToggleDirective,decorators:[(0,dist.moduleMetadata)({imports:[card_module.E,LgFeatureToggleModule.forRoot({useFactory:()=>(0,of.of)({firstFeature:!0,secondFeature:!1,thirdFeature:!0,fourthFeature:!1})},{defaultHide:!0})]})],parameters:{backgrounds:{default:"Super Blue"}},argTypes:{lgFeatureToggle:{table:{disable:!0}},ngOnInit:{table:{disable:!0}},ngOnDestroy:{table:{disable:!0}},setOptions:{table:{disable:!0}},subscription:{table:{disable:!0}}}},template="\n<lg-card *lgFeatureToggle=\"'firstFeature'\"><lg-card-content>Feature 1 showing</lg-card-content></lg-card>\n<lg-card *lgFeatureToggle=\"'secondFeature'\"><lg-card-content>Feature 2 not showing</lg-card-content></lg-card>\n<lg-card *lgFeatureToggle=\"'thirdFeature'\"><lg-card-content>Feature 3 showing</lg-card-content></lg-card>\n<lg-card *lgFeatureToggle=\"'fourthFeature'\"><lg-card-content>Feature 4 not showing</lg-card-content></lg-card>\n",featureToggle=(args=>({component:LgFeatureToggleDirective,props:args,template})).bind({});featureToggle.storyName="Feature Toggle",featureToggle.parameters={docs:{source:{code:template}}}}}]);