(self.webpackChunk_legal_and_general_canopy=self.webpackChunk_legal_and_general_canopy||[]).push([[5243],{"./projects/canopy/src/lib/focus/focus.directive.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{t:()=>LgFocusDirective});var tslib__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs");let LgFocusDirective=class LgFocusDirective{constructor(el){this.el=el}ngOnChanges({lgFocus}){if(lgFocus.currentValue){this.el.nativeElement.focus()}}static#_=this.ctorParameters=()=>[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef}];static#_2=this.propDecorators={lgFocus:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}]}};LgFocusDirective=(0,tslib__WEBPACK_IMPORTED_MODULE_1__.Cg)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive)({selector:"[lgFocus]",standalone:!0})],LgFocusDirective)},"./projects/canopy/src/lib/forms/checkbox-group/checkbox-group.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{$:()=>LgCheckboxGroupComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var checkbox_group_componentngResource=__webpack_require__("./projects/canopy/src/lib/forms/checkbox-group/checkbox-group.component.scss?ngResource"),checkbox_group_componentngResource_default=__webpack_require__.n(checkbox_group_componentngResource),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),fesm2022_forms=__webpack_require__("./node_modules/@angular/forms/fesm2022/forms.mjs"),dom_service=__webpack_require__("./projects/canopy/src/lib/utils/dom.service.ts"),hint_component=__webpack_require__("./projects/canopy/src/lib/forms/hint/hint.component.ts"),error_state_matcher=__webpack_require__("./projects/canopy/src/lib/forms/validation/error-state-matcher.ts"),validation_component=__webpack_require__("./projects/canopy/src/lib/forms/validation/validation.component.ts"),toggle_component=__webpack_require__("./projects/canopy/src/lib/forms/toggle/toggle.component.ts"),margin_directive=__webpack_require__("./projects/canopy/src/lib/spacing/margin/margin.directive.ts"),label_component=__webpack_require__("./projects/canopy/src/lib/forms/label/label.component.ts"),focus_directive=__webpack_require__("./projects/canopy/src/lib/focus/focus.directive.ts");let uniqueId=0,LgCheckboxGroupComponent=class LgCheckboxGroupComponent{get value(){return this._value}set value(value){this._value=value,this.onChange(value),this.checkboxes&&this.checkboxes.forEach((checkbox=>checkbox.checked=value.includes(checkbox.value.toString())))}get name(){return this._name}set name(value){this._name=value,this._updateRadioButtonNames()}get inlineClass(){return this.inline}get errorClass(){return this.errorState.isControlInvalid(this.control,this.controlContainer)}set checkboxes(checkboxes){checkboxes.toArray().forEach((checkbox=>{checkbox.control=this.control})),this._checkboxes=checkboxes}get checkboxes(){return this._checkboxes}set variant(variant){this._variant&&this.renderer.removeClass(this.hostElement.nativeElement,`lg-checkbox-group--${this.variant}`),this.renderer.addClass(this.hostElement.nativeElement,`lg-checkbox-group--${variant}`),this._variant=variant}get variant(){return this._variant}set hintElement(element){this.ariaDescribedBy=this.domService.toggleIdInStringProperty(this.ariaDescribedBy,this._validationElement,element),this._hintElement=element}set errorElement(element){this.ariaDescribedBy=this.domService.toggleIdInStringProperty(this.ariaDescribedBy,this._validationElement,element),this._validationElement=element}constructor(control,errorState,controlContainer,domService,renderer,hostElement){this.control=control,this.errorState=errorState,this.controlContainer=controlContainer,this.domService=domService,this.renderer=renderer,this.hostElement=hostElement,this.nextUniqueId=++uniqueId,this._name=`lg-checkbox-group-${this.nextUniqueId}`,this._value=[],this.id=`lg-checkbox-group-id-${this.nextUniqueId}`,this.inline=!1,this.disabled=!1,this.variant=this.hostElement.nativeElement.tagName.split("-")[1].toLowerCase(),null!=this.control&&(this.control.valueAccessor=this)}onChange(value){this._value=value}onTouched(_){}writeValue(obj){this.value=obj}registerOnChange(fn){this.onChange=fn}registerOnTouched(fn){this.onTouched=fn}setDisabledState(isDisabled){this.disabled=isDisabled}_updateRadioButtonNames(){this.checkboxes&&this.checkboxes.forEach((checkbox=>{checkbox.name=this.name}))}static#_=this.ctorParameters=()=>[{type:fesm2022_forms.vO,decorators:[{type:core.Self},{type:core.Optional}]},{type:error_state_matcher.B},{type:fesm2022_forms.j4,decorators:[{type:core.Optional},{type:core.Host},{type:core.SkipSelf}]},{type:dom_service.J},{type:core.Renderer2},{type:core.ElementRef}];static#_2=this.propDecorators={id:[{type:core.Input}],inline:[{type:core.Input}],disabled:[{type:core.Input}],focus:[{type:core.Input}],ariaDescribedBy:[{type:core.Input}],value:[{type:core.Input}],name:[{type:core.Input}],inlineClass:[{type:core.HostBinding,args:["class.lg-checkbox-group--inline"]}],errorClass:[{type:core.HostBinding,args:["class.lg-checkbox-group--error"]}],checkboxes:[{type:core.ContentChildren,args:[(0,core.forwardRef)((()=>toggle_component.N)),{descendants:!0}]}],hintElement:[{type:core.ContentChild,args:[hint_component.m]}],errorElement:[{type:core.ContentChild,args:[validation_component.Q]}]}};LgCheckboxGroupComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"lg-checkbox-group, lg-filter-multiple-group",template:'<fieldset\n  [attr.aria-describedby]="ariaDescribedBy"\n  [attr.tabindex]="focus ? \'-1\' : null"\n  [lgFocus]="focus"\n>\n  <legend lg-label [attr.for]="id" lgMarginBottom="xs">\n    <ng-content></ng-content>\n  </legend>\n  <ng-content select="lg-hint"></ng-content>\n  <ng-content select="lg-toggle, lg-checkbox, lg-filter-checkbox"></ng-content>\n  <ng-content select="lg-validation"></ng-content>\n</fieldset>\n<ng-content select="lg-hint"></ng-content>\n',encapsulation:core.ViewEncapsulation.None,standalone:!0,imports:[focus_directive.t,label_component.d,margin_directive.X],styles:[checkbox_group_componentngResource_default()]})],LgCheckboxGroupComponent)},"./projects/canopy/src/lib/forms/toggle/toggle.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{N:()=>LgToggleComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var toggle_componentngResource=__webpack_require__("./projects/canopy/src/lib/forms/toggle/toggle.component.scss?ngResource"),toggle_componentngResource_default=__webpack_require__.n(toggle_componentngResource),toggle_switch_componentngResource=__webpack_require__("./projects/canopy/src/lib/forms/toggle/toggle--switch.component.scss?ngResource"),toggle_switch_componentngResource_default=__webpack_require__.n(toggle_switch_componentngResource),toggle_filter_componentngResource=__webpack_require__("./projects/canopy/src/lib/forms/toggle/toggle--filter.component.scss?ngResource"),toggle_filter_componentngResource_default=__webpack_require__.n(toggle_filter_componentngResource),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),fesm2022_forms=__webpack_require__("./node_modules/@angular/forms/fesm2022/forms.mjs"),common=__webpack_require__("./node_modules/@angular/common/fesm2022/common.mjs"),dom_service=__webpack_require__("./projects/canopy/src/lib/utils/dom.service.ts"),error_state_matcher=__webpack_require__("./projects/canopy/src/lib/forms/validation/error-state-matcher.ts"),validation_component=__webpack_require__("./projects/canopy/src/lib/forms/validation/validation.component.ts"),checkbox_group_component=__webpack_require__("./projects/canopy/src/lib/forms/checkbox-group/checkbox-group.component.ts"),icon_component=__webpack_require__("./projects/canopy/src/lib/icon/icon.component.ts"),focus_directive=__webpack_require__("./projects/canopy/src/lib/focus/focus.directive.ts");let nextUniqueId=0,LgToggleComponent=class LgToggleComponent{get disabled(){return this._disabled||null!==this.checkboxGroup&&this.checkboxGroup.disabled}set disabled(isDisabled){this._disabled=isDisabled}get errorClass(){return this.errorState.isControlInvalid(this.control,this.controlContainer)}set errorElement(element){this.ariaDescribedBy=this.domService.toggleIdInStringProperty(this.ariaDescribedBy,this._validationElement,element),this._validationElement=element}constructor(control,checkboxGroup,domService,errorState,controlContainer,hostElement){this.control=control,this.checkboxGroup=checkboxGroup,this.domService=domService,this.errorState=errorState,this.controlContainer=controlContainer,this.hostElement=hostElement,this.uniqueId=nextUniqueId++,this.checked=!1,this.id=`lg-toggle-${this.uniqueId}`,this.name=`lg-toggle-${this.uniqueId}`,this.value=!1,this.variant="checkbox",this.size="sm",this._disabled=!1,this.blur=new core.EventEmitter,this.class=!0,this.selectorVariant=this.hostElement.nativeElement.tagName.split("-")[1].toLowerCase(),this.checkboxGroup||null!=this.control&&(this.control.valueAccessor=this)}onCheck(){if(this.checkboxGroup)return this.checkboxGroup.onTouched(),void(this.checkboxGroup.value.includes(this.value.toString())?this.checkboxGroup.value=this.checkboxGroup.value.filter((value=>value!==this.value)):this.checkboxGroup.value=[this.value.toString(),...this.checkboxGroup.value]);this.onTouched(),this.checked=!this.checked,this.onChange(this.checked?this.value:null)}onBlur(event){this.blur.emit(event)}onChange(value){this.value=value}onTouched(_){}writeValue(value){value===this.value&&(this.checked=!0)}registerOnChange(fn){this.onChange=fn}registerOnTouched(fn){this.onTouched=fn}setDisabledState(isDisabled){this.disabled=isDisabled}ngOnInit(){this.checkboxGroup&&(this.variant=this.checkboxGroup.variant,this.checkboxGroup.value.includes(this.value.toString())&&(this.checked=!0),this.name=this.checkboxGroup.name),"toggle"===this.selectorVariant||this.checkboxGroup||(this.variant=this.selectorVariant)}static#_=this.ctorParameters=()=>[{type:fesm2022_forms.vO,decorators:[{type:core.Self},{type:core.Optional}]},{type:checkbox_group_component.$,decorators:[{type:core.Optional},{type:core.Inject,args:[(0,core.forwardRef)((()=>checkbox_group_component.$))]}]},{type:dom_service.J},{type:error_state_matcher.B},{type:fesm2022_forms.j4,decorators:[{type:core.Optional},{type:core.Host},{type:core.SkipSelf}]},{type:core.ElementRef}];static#_2=this.propDecorators={checked:[{type:core.Input}],id:[{type:core.Input}],name:[{type:core.Input}],value:[{type:core.Input}],focus:[{type:core.Input}],ariaDescribedBy:[{type:core.Input}],variant:[{type:core.Input}],size:[{type:core.Input}],_disabled:[{type:core.Input}],blur:[{type:core.Output}],class:[{type:core.HostBinding,args:["class.lg-toggle"]}],errorClass:[{type:core.HostBinding,args:["class.lg-toggle--error"]}],inputRef:[{type:core.ViewChild,args:["input",{static:!0}]}],errorElement:[{type:core.ContentChild,args:[validation_component.Q]}]}};LgToggleComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"lg-toggle, lg-checkbox, lg-switch, lg-filter-checkbox",template:'<input\n  (click)="onCheck()"\n  (blur)="onBlur($event)"\n  [attr.aria-describedby]="ariaDescribedBy || null"\n  [checked]="checked || null"\n  [disabled]="disabled || null"\n  [attr.id]="id"\n  [attr.name]="name"\n  [attr.value]="value"\n  [attr.aria-invalid]="errorClass"\n  [lgFocus]="focus"\n  class="lg-toggle__input"\n  type="checkbox"\n/>\n<label\n  [attr.for]="id"\n  class="lg-toggle__label"\n  [ngClass]="{\n    \'lg-toggle__label--switch\': variant === \'switch\',\n    \'lg-toggle__label--filter\': variant === \'filter\'\n  }"\n>\n  <span *ngIf="variant === \'filter\'" class="lg-toggle__icon-wrapper">\n    <lg-icon class="lg-toggle__icon-add" name="add"></lg-icon>\n    <lg-icon class="lg-toggle__icon-selected" name="checkmark"></lg-icon>\n  </span>\n  <lg-icon\n    *ngIf="variant === \'checkbox\'"\n    class="lg-toggle__checkbox"\n    [ngClass]="{\n      \'lg-toggle__checkbox--sm\': size === \'sm\',\n      \'lg-toggle__checkbox--lg\': size === \'lg\'\n    }"\n    name="checkbox-mark"\n  ></lg-icon>\n  <ng-content></ng-content>\n</label>\n<ng-content select="lg-validation"></ng-content>\n',encapsulation:core.ViewEncapsulation.None,standalone:!0,imports:[focus_directive.t,common.NgClass,common.NgIf,icon_component.A],styles:[toggle_componentngResource_default(),toggle_switch_componentngResource_default(),toggle_filter_componentngResource_default()]})],LgToggleComponent)},"./projects/canopy/src/lib/forms/checkbox-group/checkbox-group.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"/*\n  $bg-color: background color of the element.\n  $color: colour of the outline.\n  Sets the focus outline inside the element, by using multiple box shadows\n*/\n/*\n  $breakpoint: string value for the breakpoint screen size.\n  Creates a mixin which allows breakpoints to be added to css blocks\n*/\n.lg-checkbox-group--checkbox {\n  display: block;\n  margin-bottom: var(--component-margin);\n}\n.lg-checkbox-group--checkbox .lg-toggle {\n  margin-bottom: var(--space-xs);\n}\n\n.lg-checkbox-group--inline .lg-toggle {\n  display: inline-block;\n  margin-right: var(--space-md);\n}\n.lg-checkbox-group--inline .lg-toggle:last-of-type {\n  margin-right: 0;\n}\n\n.lg-checkbox-group--filter {\n  display: block;\n  margin-bottom: var(--component-margin);\n}\n.lg-checkbox-group--filter .lg-toggle {\n  display: inline-block;\n  margin-right: var(--space-xs);\n  margin-bottom: 0;\n}\n.lg-checkbox-group--filter.lg-checkbox-group--filter--no-icons .lg-toggle__label--filter {\n  padding-left: var(--space-sm);\n}\n.lg-checkbox-group--filter.lg-checkbox-group--filter--no-icons .lg-toggle__icon-wrapper {\n  border: 0 !important;\n  clip: rect(0 0 0 0) !important;\n  height: auto !important;\n  margin: 0 !important;\n  overflow: hidden !important;\n  padding: 0 !important;\n  position: absolute !important;\n  width: 0.0625em !important;\n  white-space: nowrap !important;\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./projects/canopy/src/lib/forms/toggle/toggle--filter.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"/*\n  $bg-color: background color of the element.\n  $color: colour of the outline.\n  Sets the focus outline inside the element, by using multiple box shadows\n*/\n/*\n  $breakpoint: string value for the breakpoint screen size.\n  Creates a mixin which allows breakpoints to be added to css blocks\n*/\n.lg-toggle__label--filter {\n  display: inline-block;\n  border: solid var(--border-width) var(--filter-btn-bg-color-active);\n  border-radius: var(--space-md);\n  padding: var(--space-xxxs) var(--space-sm) var(--space-xxxs) var(--space-xxs);\n  background: transparent;\n  font-size: var(--text-fs--8-size);\n  margin-bottom: var(--space-xs);\n  transition: all var(--animation-duration) var(--animation-fn);\n  cursor: pointer;\n}\n.lg-toggle__label--filter .lg-icon {\n  vertical-align: sub;\n  margin-right: var(--space-xxxs);\n}\n.lg-toggle__label--filter::after {\n  content: none;\n}\n.lg-toggle__label--filter::before {\n  content: none;\n}\n.lg-toggle__label--filter:hover {\n  background-color: var(--filter-btn-bg-color-hover);\n  border-color: var(--filter-btn-bg-color-hover);\n  color: var(--filter-btn-text-color-selected);\n}\n.lg-toggle__label--filter:active {\n  background-color: var(--filter-btn-bg-color-active);\n  border-color: var(--filter-btn-bg-color-active);\n  color: var(--filter-btn-text-color-selected);\n}\n.lg-toggle--error .lg-toggle__label--filter {\n  color: var(--form-error-color);\n}\n.lg-toggle__label--filter .lg-toggle__icon-add {\n  display: inline-block;\n}\n.lg-toggle__label--filter .lg-toggle__icon-selected {\n  display: none;\n}\n\n.lg-toggle__input:checked + .lg-toggle__label--filter {\n  background: var(--filter-btn-bg-color-selected);\n  border-color: var(--filter-btn-bg-color-selected);\n  color: var(--filter-btn-text-color-selected);\n}\n.lg-toggle__input:checked + .lg-toggle__label--filter:hover {\n  background: var(--filter-btn-bg-color-selected-hover);\n  border-color: var(--filter-btn-bg-color-selected-hover);\n}\n.lg-toggle__input:checked + .lg-toggle__label--filter:active {\n  background: var(--filter-btn-bg-color-selected-active);\n  border-color: var(--filter-btn-bg-color-selected-active);\n}\n.lg-toggle__input:checked + .lg-toggle__label--filter .lg-toggle__icon-add {\n  display: none;\n}\n.lg-toggle__input:checked + .lg-toggle__label--filter .lg-toggle__icon-selected {\n  display: inline-block;\n}\n\n.lg-toggle__input:focus-visible + .lg-toggle__label--filter {\n  outline: 0 !important;\n  box-shadow: 0 0 0 var(--inner-focus-width) var(--default-inner-focus-color), 0 0 0 var(--outer-focus-width) var(--default-focus-color);\n}\n\n.lg-toggle__input:disabled + .lg-toggle__label--filter {\n  background: var(--filter-btn-bg-color-disabled);\n  border-color: var(--filter-btn-bg-color-disabled);\n  color: var(--filter-btn-text-color-disabled);\n  pointer-events: none;\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./projects/canopy/src/lib/forms/toggle/toggle--switch.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,'/*\n  $bg-color: background color of the element.\n  $color: colour of the outline.\n  Sets the focus outline inside the element, by using multiple box shadows\n*/\n/*\n  $breakpoint: string value for the breakpoint screen size.\n  Creates a mixin which allows breakpoints to be added to css blocks\n*/\n.lg-toggle__input:checked + .lg-toggle__label--switch::before, .lg-toggle__input:checked + .lg-toggle__label--switch::after {\n  background-color: var(--toggle-switch-on-bg-color);\n  border-color: var(--toggle-switch-on-border-color);\n}\n.lg-toggle__input:checked + .lg-toggle__label--switch::after {\n  background-color: var(--toggle-switch-on-dot-bg-color);\n  transform: translate(calc(var(--toggle-switch-width) - var(--toggle-switch-dot-offset) - 100%), -50%);\n}\n\n.lg-toggle__label--switch::before, .lg-toggle__label--switch::after {\n  background-color: var(--toggle-switch-off-dot-bg-color);\n  margin-right: var(--space-xxs);\n  transition: all var(--animation-duration) var(--animation-cubic-bezier-fn);\n}\n.lg-toggle__input:disabled + .lg-toggle__label--switch {\n  color: var(--toggle-switch-disabled-color);\n}\n\n.lg-toggle__label--switch::before {\n  content: "";\n  left: 0;\n  top: 0;\n  bottom: 0;\n  display: inline-block;\n  height: var(--toggle-switch-height);\n  width: var(--toggle-switch-width);\n  border: var(--border-width) solid var(--border-color);\n  border-radius: calc(var(--toggle-switch-height) / 2);\n  margin: var(--space-xxxs) var(--space-sm) auto 0;\n  background-color: var(--toggle-switch-off-bg-color);\n  min-width: var(--toggle-switch-width);\n}\n.lg-toggle__input:hover + .lg-toggle__label--switch::before {\n  border-color: var(--border-hover-color);\n}\n.lg-toggle__input:focus-visible + .lg-toggle__label--switch::before {\n  border-color: var(--border-focus-color);\n  outline: 0 !important;\n  box-shadow: 0 0 0 var(--inner-focus-width) var(--default-inner-focus-color), 0 0 0 var(--outer-focus-width) var(--default-focus-color);\n}\n.lg-toggle__input:checked + .lg-toggle__label--switch::before {\n  background-color: var(--toggle-bg-color);\n  border-color: var(--toggle-switch-on-border-color);\n}\n.lg-toggle__input:disabled + .lg-toggle__label--switch::before {\n  background-color: var(--toggle-switch-disabled-bg-color);\n  border-color: var(--toggle-switch-disabled-border-color);\n}\n.lg-toggle__input:disabled:checked + .lg-toggle__label--switch::before {\n  border-color: var(--toggle-disabled-color);\n  background-color: var(--toggle-disabled-color);\n}\n.lg-toggle--error .lg-toggle__input + .lg-toggle__label--switch::before {\n  border-color: var(--form-error-border-color);\n}\n.lg-toggle--error .lg-toggle__input:checked + .lg-toggle__label--switch::before {\n  background-color: var(--form-error-color);\n  color: var(--form-error-color);\n}\n\n.lg-toggle__label--switch::after {\n  content: " ";\n  position: absolute;\n  left: 0;\n  top: var(--space-sm);\n  bottom: auto;\n  margin: auto;\n  height: var(--toggle-outer-height);\n  width: var(--toggle-outer-width);\n  transform: translate(var(--toggle-switch-dot-offset), -50%);\n  border-radius: 50%;\n}\n.lg-toggle__input:disabled + .lg-toggle__label--switch::after {\n  background-color: var(--toggle-switch-disabled-dot-bg-color);\n}',""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./projects/canopy/src/lib/forms/toggle/toggle.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"/*\n  $bg-color: background color of the element.\n  $color: colour of the outline.\n  Sets the focus outline inside the element, by using multiple box shadows\n*/\n/*\n  $breakpoint: string value for the breakpoint screen size.\n  Creates a mixin which allows breakpoints to be added to css blocks\n*/\n.lg-toggle {\n  display: block;\n  margin-bottom: var(--component-margin);\n}\n\n.lg-toggle__input {\n  border: 0 !important;\n  clip: rect(0 0 0 0) !important;\n  height: auto !important;\n  margin: 0 !important;\n  overflow: hidden !important;\n  padding: 0 !important;\n  position: absolute !important;\n  width: 0.0625em !important;\n  white-space: nowrap !important;\n}\n\n.lg-toggle__label {\n  display: flex;\n  align-items: center;\n  position: relative;\n  font-weight: var(--font-weight-regular);\n}\n.lg-toggle__input:disabled + .lg-toggle__label {\n  color: var(--disabled-color);\n}\n.lg-toggle--error .lg-toggle__label {\n  color: var(--form-error-color);\n}\n\n.lg-toggle__label > .lg-toggle__checkbox {\n  background-color: var(--color-white);\n  border: var(--border-width) solid var(--toggle-border-color);\n  color: transparent;\n  font-size: var(--_toggle-icon-font-size);\n  margin: var(--_toggle-icon-margin-top) var(--space-sm) auto 0;\n}\n.lg-toggle__label > .lg-toggle__checkbox--sm {\n  --_toggle-icon-font-size: 0.8rem;\n  --_toggle-icon-margin-top: var(--space-xxxs);\n}\n.lg-toggle__label > .lg-toggle__checkbox--lg {\n  --_toggle-icon-font-size: 1.334rem;\n  --_toggle-icon-margin-top: -0.063rem;\n}\n.lg-toggle__label > .lg-toggle__checkbox.lg-icon > svg {\n  display: inline-block;\n  height: auto;\n  width: auto;\n}\n.lg-toggle__input:focus-visible + .lg-toggle__label > .lg-toggle__checkbox {\n  outline: 0 !important;\n  box-shadow: 0 0 0 var(--inner-focus-width) var(--default-inner-focus-color), 0 0 0 var(--outer-focus-width) var(--default-focus-color);\n}\n.lg-toggle__input:checked + .lg-toggle__label > .lg-toggle__checkbox {\n  background-color: var(--toggle-bg-color);\n  color: var(--toggle-checkbox-color);\n  border-color: var(--toggle-checkbox-active-border-color);\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()}}]);