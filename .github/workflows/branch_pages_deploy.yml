name: Deploy branch to gh-pages
on:
  workflow_dispatch:
    inputs:
      pullNumber:
        description: 'The PR number'
        required: true

jobs:
  # Deploys selected branch to GitHub Pages
  deploy-branch:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v5.0.0
        with:
          node-version-file: '.nvmrc'

      - name: 'Install dependencies'
        run: npm ci

      - name: 'Save PR data'
        uses: actions/github-script@v8
        id: prData
        with:
          script: |
            const getData = require('./.github/workflow-scripts/gh-pages/get-pr-data.js');
            return await getData({
              pullNumber: '${{ github.event.inputs.pullNumber }}',
              github,
              context
            });

      - name: 'Download artifacts from PR'
        uses: actions/github-script@v8
        with:
          script: |
            const downloadArtifact = require('./.github/workflow-scripts/gh-pages/download-branch-deploy-artifact.js');
            await downloadArtifact({
              branch: '${{ fromJSON(steps.prData.outputs.result).branch }}',
              sha: '${{ fromJSON(steps.prData.outputs.result).sha }}',
              github,
              context
            });

      - name: 'Unzip storybook build'
        run: |
          unzip lg-sb-build.zip -d ./docs/lg-sb-'${{ fromJSON(steps.prData.outputs.result).branch }}'
          rm lg-sb-build.zip

      - name: 'Set PERCY_TOKEN env var'
        run: echo "PERCY_TOKEN_NAME=${{ startsWith(fromJSON(steps.prData.outputs.result).branch, 'bm-') && 'PERCY_TOKEN_BM' || 'PERCY_TOKEN' }}" >> $GITHUB_ENV


      - name: 'Visual comparison'
        run: npx percy storybook ./docs/lg-sb-${{ fromJSON(steps.prData.outputs.result).branch }} --config=.percy.yml
        env:
          PERCY_TOKEN: ${{ secrets[env.PERCY_TOKEN_NAME] }}
          PERCY_BRANCH: '${{ fromJSON(steps.prData.outputs.result).branch }}'
          NETWORK_IDLE_WAIT_TIMEOUT: 5000

      - name: 'Notify GitHub of branch deployment'
        uses: actions/github-script@v8
        id: deploymentId
        with:
          script: |
            const createDeployment = require('./.github/workflow-scripts/gh-pages/create-gh-deployment.js');
            return await createDeployment({
              sha: '${{ fromJSON(steps.prData.outputs.result).sha }}',
              github,
              context,
            });

      - name: 'Notify GitHub of deployment in progress'
        uses: actions/github-script@v8
        with:
          script: |
            const createDeploymentStatus = require('./.github/workflow-scripts/gh-pages/create-gh-deployment-status.js');
            await createDeploymentStatus({
              deploymentId: ${{ fromJSON(steps.deploymentId.outputs.result) }},
              state: 'in_progress',
              environmentUrl: '${{ fromJSON(steps.prData.outputs.result).environmentUrl }}',
              github,
              context,
            });

      - name: 'Branch deployment to GitHub Pages'
        uses: actions/github-script@v8
        with:
          script: |
            const deployBranch = require('./.github/workflow-scripts/gh-pages/deploy.js');
            await deployBranch({
              branch: '${{ fromJSON(steps.prData.outputs.result).branch }}',
              sha: '${{ fromJSON(steps.prData.outputs.result).sha }}',
              pullNumber: ${{ fromJSON(steps.prData.outputs.result).pullNumber }},
              github,
              context,
              exec,
            });

      - name: 'Checking out current branch'
        if: always()
        run: git checkout ${{ github.sha }}

      - name: 'Notify GitHub of deployment status'
        if: always()
        uses: actions/github-script@v8
        with:
          script: |
            const createDeploymentStatus = require('./.github/workflow-scripts/gh-pages/create-gh-deployment-status.js');
            await createDeploymentStatus({
              deploymentId: ${{ fromJSON(steps.deploymentId.outputs.result) }},
              state: '${{ job.status }}' === 'success' ? 'success' : 'failure',
              environmentUrl: '${{ fromJSON(steps.prData.outputs.result).environmentUrl }}',
              github,
              context,
            });

      - name: 'Add label to PR'
        if: success()
        uses: actions/github-script@v8
        with:
          script: |
            const addLabels = require('./.github/workflow-scripts/add-labels.js');
            await addLabels({
              issueNumber: ${{ fromJSON(steps.prData.outputs.result).pullNumber }},
              labels: [ 'deployed' ],
              github,
              context
            });
