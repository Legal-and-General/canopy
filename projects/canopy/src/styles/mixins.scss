/*
  $bg-color: background color of the element.
  $color: colour of the outline.
  Sets the focus outline inside the element, by using multiple box shadows
*/
@mixin lg-inner-focus-outline($bg-color, $color: var(--color-white)) {
  outline: 0;
  box-shadow: inset 0 0 0 0.25rem $bg-color, inset 0 0 0 0.3rem $color;
}

@mixin lg-outer-focus-outline($bg-color: var(--default-focus-color)) {
  outline: 0;
  box-shadow: 0 0 0 0.25rem $bg-color;
}

@mixin lg-background-focus(
  $bg-color: var(--link-focus-background-color),
  $color: var(--link-focus-color)
) {
  background: $bg-color;
  color: $color;
  outline: var(--link-focus-outline) solid $bg-color;
}

@mixin lg-font-size($size, $modifier: null) {
  font-size: var(--text-fs-#{$size}-size);
  line-height: var(--text-fs-#{$size}-line-height);

  @if $modifier {
    font-weight: var(--text-fs-#{$size}-weight--#{$modifier});
  } @else {
    font-weight: var(--text-fs-#{$size}-weight);
  }
}

@mixin lg-visually-hidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: auto;
  margin: 0;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 0.0625em;
  white-space: nowrap;
}

$breakpoints: (
  // 320
  'sm': 20rem,
  // 768
  'md': 48rem,
  // 1024
  'lg': 64rem,
  // 1280
  'xl': 80rem,
  // 1440
  'xxl': 90rem
) !default;

/*
  $breakpoint: string value for the breakpoint screen size.
  Creates a mixin which allows breakpoints to be added to css blocks
*/
@mixin lg-breakpoint($breakpoint, $range: 'min-width') {
  @if map-has-key($breakpoints, $breakpoint) {
    @media ($range: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
      + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

@mixin lg-variant($variant: 'generic') {
  a {
    &:visited {
      color: var(--color-black);
    }

    &:focus {
      box-shadow: none;
      @include lg-background-focus;
    }
  }

  @if ($variant == 'generic') {
    background-color: var(--generic-bg-color);
    color: var(--generic-color);

    a {
      color: var(--generic-link-color);

      &:hover {
        color: var(--generic-link-hover-color);
      }

      &:focus:hover {
        color: var(--generic-link-focus-color);
      }
    }
  } @else if ($variant == 'info') {
    background-color: var(--info-bg-color);
    color: var(--info-color);

    a {
      color: var(--info-link-color);

      &:hover {
        color: var(--info-link-hover-color);
      }

      &:focus:hover {
        color: var(--info-link-focus-color);
      }
    }
  } @else if ($variant == 'success') {
    background-color: var(--success-bg-color);
    color: var(--success-color);

    a {
      color: var(--success-link-color);

      &:hover {
        color: var(--success-link-hover-color);
      }

      &:focus:hover {
        color: var(--success-link-focus-color);
      }
    }
  } @else if ($variant == 'warning') {
    background-color: var(--warning-bg-color);
    color: var(--warning-color);

    a {
      color: var(--warning-link-color);

      &:hover {
        color: var(--warning-link-hover-color);
      }

      &:focus:hover {
        color: var(--warning-link-focus-color);
      }
    }
  } @else if ($variant == 'error') {
    background-color: var(--error-bg-color);
    color: var(--error-color);

    a {
      color: var(--error-link-color);

      &:hover {
        color: var(--error-link-hover-color);
      }

      &:focus:hover {
        color: var(--error-link-focus-color);
      }
    }
  }
}
