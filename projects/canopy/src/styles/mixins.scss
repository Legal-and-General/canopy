/*
  $bg-color: background color of the element.
  $color: colour of the outline.
  Sets the focus outline inside the element, by using multiple box shadows
*/
@mixin lg-inner-focus-outline($bg-color, $color: var(--color-white)) {
  outline: 0;
  box-shadow: inset 0 0 0 0.25rem $bg-color, inset 0 0 0 0.3rem $color;
}

@mixin lg-outer-focus-outline($bg-color: var(--default-focus-color)) {
  outline: 0;
  box-shadow: 0 0 0 0.25rem $bg-color;
}

// this mixin will replace lg-outer-focus-outline in the future when all the components will have to use this focus styling
@mixin lg-focus-outline(
  $bg-color: var(--default-focus-color),
  $inner-bg-color: var(--default-inner-focus-color)
) {
  outline: 0;
  box-shadow: 0 0 0 0.125rem $inner-bg-color, 0 0 0 0.375rem $bg-color;
}

@mixin lg-link(
  $default-color: var(--link-color),
  $hover-color: var(--link-hover-color),
  $visited-color: var(--link-visited-color),
  $active-color: var(--link-active-color),
  $active-bg-color: var(--link-active-bg-color),
  $focus-color: var(--link-focus-color),
  $focus-bg-color: var(--link-focus-bg-color)
) {
  $box-shadow-inset-width: -0.063rem;

  border-bottom: 0.125rem solid $default-color;
  color: $default-color;
  line-height: initial;
  padding: 0 0.125rem;
  text-decoration: none;

  &:hover,
  &:hover:visited {
    color: $hover-color;
    border-bottom: 0;
    box-shadow: inset 0 $box-shadow-inset-width 0 0 $hover-color,
      0 0.188rem 0 0 $hover-color;
  }

  &:visited {
    color: $visited-color;
    border-color: $visited-color;
  }

  &:active {
    background-color: $active-bg-color;
    border-bottom-color: $active-color;
    color: $active-color;
    outline: 0;
  }

  &:focus,
  &:focus:hover {
    background-color: $focus-bg-color;
    border-bottom: 0;
    color: $focus-color;
    outline: 0.063rem solid $focus-bg-color;
    outline-offset: 0;

    &:hover {
      box-shadow: none;
    }
  }
}

@mixin lg-unstyled-link() {
  text-decoration: underline;
  border-bottom: 0;
  padding: 0;

  &:hover {
    border-bottom: 0;
    box-shadow: none;
    background-color: transparent;
    color: inherit;
  }

  &:active,
  &:focus,
  &:focus:hover {
    background-color: transparent;
    color: inherit;
  }

  &:focus,
  &:focus:hover {
    @include lg-outer-focus-outline;
  }
}

@mixin lg-font-size($size, $modifier: null, $type: null) {
  font-size: var(--text-fs-#{$size}-size);
  line-height: var(--text-fs-#{$size}-line-height);

  @if $modifier {
    font-weight: var(--text-fs-#{$size}-weight--#{$modifier});
  } @else {
    font-weight: var(--text-fs-#{$size}-weight);
  }

  @if $type == 'expressive' {
    font-family: var(--font-family-#{$type});
  }
}

@mixin lg-visually-hidden {
  border: 0 !important;
  clip: rect(0 0 0 0) !important;
  height: auto !important;
  margin: 0 !important;
  overflow: hidden !important;
  padding: 0 !important;
  position: absolute !important;
  width: 0.0625em !important;
  white-space: nowrap !important;
}

$breakpoints: (
  // 320
  'sm': 20rem,
  // 768
  'md': 48rem,
  // 1024
  'lg': 64rem,
  // 1280
  'xl': 80rem,
  // 1440
  'xxl': 90rem
) !default;

/*
  $breakpoint: string value for the breakpoint screen size.
  Creates a mixin which allows breakpoints to be added to css blocks
*/
@mixin lg-breakpoint($breakpoint, $range: 'min-width') {
  @if map-has-key($breakpoints, $breakpoint) {
    $value: map-get($breakpoints, $breakpoint);

    @if $range == 'max-width' {
      // Removes 1 pixel if using max-width so that there is no
      // overlap when used with min-width.
      $value: $value - 0.06rem;
    }

    @media ($range: $value) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
      + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

@mixin lg-variant($variant: 'generic') {
  background-color: var(--#{$variant}-bg-color) !important;
  color: var(--#{$variant}-color) !important;

  a:not(.lg-btn) {
    @include lg-link(
      $default-color: var(--#{$variant}-link-color),
      $hover-color: var(--#{$variant}-link-hover-color),
      $visited-color: var(--#{$variant}-link-visited-color),
      $active-color: var(--#{$variant}-link-active-color),
      $active-bg-color: var(--#{$variant}-link-active-bg-color),
      $focus-color: var(--#{$variant}-link-focus-color),
      $focus-bg-color: var(--#{$variant}-link-focus-bg-color)
    );
  }

  .lg-btn--secondary-dark {
    background-color: transparent !important;
    border-color: var(--#{$variant}-color) !important;
    color: var(--#{$variant}-color) !important;

    @if ($variant == 'generic') {
      &:hover {
        background-color: var(--color-taupe-grey) !important;
        border-color: var(--color-taupe-grey) !important;
        color: var(--color-white) !important;
      }

      &:active {
        background-color: var(--color-charcoal) !important;
        color: var(--color-white) !important;
      }
    } @else if ($variant == 'info') {
      &:hover {
        background-color: var(--color-midnight-blue) !important;
        color: var(--color-white) !important;
      }

      &:active {
        background-color: var(--color-super-blue-darkest) !important;
        color: var(--color-white) !important;
      }
    } @else if ($variant == 'success') {
      &:hover {
        background-color: var(--color-mexican-green) !important;
        color: var(--color-white) !important;
      }

      &:active {
        background-color: var(--color-leafy-green-dark) !important;
        color: var(--color-white) !important;
      }
    } @else if ($variant == 'warning') {
      &:hover {
        background-color: var(--color-earth-brown-dark) !important;
        color: var(--color-white) !important;
      }

      &:active {
        background-color: var(--color-earth-brown-darkest) !important;
        color: var(--color-white) !important;
      }
    } @else if ($variant == 'error') {
      &:hover {
        background-color: var(--color-terracotta) !important;
        color: var(--color-white) !important;
      }

      &:active {
        background-color: var(--color-earth-brown-darkest) !important;
        color: var(--color-white) !important;
      }
    }
  }
}

@mixin lg-card {
  background-color: var(--card-bg-color);
  border-radius: var(--border-radius-lg);
  margin-bottom: var(--grid-gutter);
  padding: var(--component-padding);
}

@mixin lg-typography-default {
  font-size: var(--text-base-size);
  font-weight: var(--font-weight-regular);
  font-family: var(--font-family);
  line-height: var(--text-base-line-height);
  color: var(--color-text);
}

@mixin lg-paragraph {
  font-size: var(--text-fs-1-size);
  margin-bottom: var(--text-bottom-margin);

  &:last-child {
    margin-bottom: 0;
  }
}

@mixin lg-list-margin {
  margin-left: var(--space-unit);
  margin-bottom: var(--text-bottom-margin);
}

@mixin lg-canopy-element-typography {
  html,
  body,
  input,
  select {
    @include lg-typography-default;
  }

  p {
    @include lg-paragraph;
  }

  a {
    @include lg-link;
  }

  b,
  strong {
    font-weight: var(--font-weight-bold);
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    display: block;
    margin-bottom: var(--text-bottom-margin);
  }

  h1 {
    @include lg-font-size('5');
  }

  h2 {
    @include lg-font-size('4');
  }

  h3 {
    @include lg-font-size('3');
  }

  h4 {
    @include lg-font-size('2');
  }

  h5 {
    @include lg-font-size('1');
  }

  h6 {
    @include lg-font-size('-8');
  }

  small {
    @include lg-font-size('-6');
  }

  ul,
  ol {
    @include lg-list-margin;
  }
}
